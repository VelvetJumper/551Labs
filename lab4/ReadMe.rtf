{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Compute.c\
1. To run I use \'91./manage &\'92, \'91./compute 1 &\'92, \'91./compute 500\'92, for an example.\
\
\
tCompute.c\
1. Registers with manage with its pid and stores all data in its pid index of my process stats array (pStats).\
2. To account for multiple threads waking up I used a global flag processFlag. When a number is available the search function sets the flag to 1. When compute takes a number it updates the flag to be 0. Each compute thread waits on this flag to check for the condition variable sent from search.\
3. This program runs the same way compute.c runs so you will need to specify a starting number like in compute.c: \'91./manage &\'92, \'91./tcompute 1\'92}